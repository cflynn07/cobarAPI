// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, activityInsert, app, config, configureEventCronJob, cronDaemonUid, employee, event, eventParticipant, events, express, mandrill, pub, redisClient, redisStore, schedule, sequelize, store, sub, twilioClient, uuid, _;

  require('./config/envGlobals')(GLOBAL);

  config = require('./config/config');

  twilioClient = require('./config/twilioClient');

  mandrill = require('./config/mandrill');

  redisClient = require('./config/redis').createClient();

  ORM = require('./components/oRM');

  sequelize = ORM.setup();

  schedule = require('node-schedule');

  _ = require('underscore');

  activityInsert = require(config.appRoot + 'server/components/activityInsert');

  uuid = require('node-uuid');

  express = require('express.io');

  pub = require('./config/redis').createClient();

  sub = require('./config/redis').createClient();

  store = require('./config/redis').createClient();

  redisStore = require('./config/redis').createStore();

  event = ORM.model('event');

  eventParticipant = ORM.model('eventParticipant');

  employee = ORM.model('employee');

  cronDaemonUid = uuid.v4();

  events = {};

  app = express().http().io();

  app.io.set('store', new express.io.RedisStore({
    redis: require('redis'),
    redisPub: pub,
    redisSub: sub,
    redisClient: store
  }));

  redisClient.subscribe('eventCronChannel', function() {});

  redisClient.on('message', function(channel, message) {
    if (channel === 'eventCronChannel') {
      return event.find({
        where: {
          uid: message
        }
      }).success(function(resultEvent) {
        if (!resultEvent) {
          return;
        }
        if (!_.isUndefined(events[resultEvent.uid]) && _.isFunction(events[resultEvent.uid].cancel)) {
          events[resultEvent.uid].cancel();
        }
        return configureEventCronJob(resultEvent);
      });
    }
  });

  event.findAll({
    where: ['(dateTime >= NOW() and cronDaemonUid is NULL) or (dateTime < NOW() and cronDaemonUid is NULL)']
  }).success(function(resultEvents) {
    var resultEvent, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = resultEvents.length; _i < _len; _i++) {
      resultEvent = resultEvents[_i];
      _results.push(configureEventCronJob(resultEvent));
    }
    return _results;
  });

  configureEventCronJob = function(eventObj) {
    return (function(eventObj) {
      var eventDate;
      eventDate = new Date(eventObj.dateTime);
      if (eventDate < (new Date())) {
        eventDate = new Date();
      }
      return events[eventObj.uid] = schedule.scheduleJob(eventDate, function() {
        return sequelize.query("UPDATE events SET cronDaemonUid = '" + cronDaemonUid + "' WHERE uid = '" + eventObj.uid + "' AND cronDaemonUid is null").success(function() {
          return event.find({
            where: {
              uid: eventObj.uid,
              cronDaemonUid: cronDaemonUid
            }
          }).success(function(resultEventObj) {
            if (!resultEventObj) {
              delete events[eventObj.uid];
              console.log('events.length == ' + Object.getOwnPropertyNames(events).length);
              return;
            }
            console.log('EVENT: ' + resultEventObj.name + ' | Handled By: ' + cronDaemonUid);
            activityInsert({
              type: 'eventInitialized',
              eventUid: resultEventObj.uid,
              clientUid: resultEventObj.clientUid
            }, app);
            config.apiBroadcastPut(event, resultEventObj, app, {}, {});
            eventParticipant.findAll({
              where: {
                eventUid: resultEventObj.uid
              },
              include: [employee]
            }).success(function(resultEventParticipants) {
              var bodyMessage, eP, _i, _len, _results;
              console.log('Participants: ' + resultEventParticipants.length);
              bodyMessage = 'Business Continuity Test ' + "\n" + '"' + resultEventObj.name + '" @ ' + (new Date(resultEventObj.dateTime)).toGMTString();
              _results = [];
              for (_i = 0, _len = resultEventParticipants.length; _i < _len; _i++) {
                eP = resultEventParticipants[_i];
                _results.push((function(participant) {
                  mandrill('/messages/send', {
                    message: {
                      to: [
                        {
                          name: participant.employee.firstName + ' ' + participant.employee.lastName,
                          email: participant.employee.email
                        }
                      ],
                      from_email: 'no-reply@cobarsystems.com',
                      from_name: 'Cobar Systems',
                      subject: bodyMessage,
                      text: 'http://lyssa.cobarsystems.com/#/exercises/' + participant.uid
                    }
                  }, function(error, response) {});
                  return twilioClient.sendSms({
                    to: participant.employee.phone,
                    from: '6172507514',
                    body: bodyMessage
                  }, function(error, message) {
                    return twilioClient.sendSms({
                      to: participant.employee.phone,
                      from: '6172507514',
                      body: 'http://lyssa.cobarsystems.com/#/exercises/' + participant.uid
                    }, function(error, message) {});
                  });
                })(eP));
              }
              return _results;
            });
            delete events[resultEventObj.uid];
            return console.log('events.length == ' + Object.getOwnPropertyNames(events).length);
          });
        });
      });
    })(eventObj);
  };

}).call(this);
