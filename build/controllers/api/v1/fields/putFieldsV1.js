// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, apiAuth, apiVerifyObjectProperties, async, bcrypt, config, sequelize, updateHelper, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  bcrypt = require('bcrypt');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  updateHelper = require(GLOBAL.appRoot + 'components/updateHelper');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var client, field, group;
    client = ORM.model('client');
    field = ORM.model('field');
    group = ORM.model('group');
    return app.put(config.apiSubDir + '/v1/fields', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, employeeUid, maxLengthCheckHelper, minLengthCheckHelper, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          employeeUid = req.session.user.uid;
          minLengthCheckHelper = function(val, objectKey, object, callback) {
            var intVal;
            if (!_.isUndefined(val)) {
              intVal = parseInt(val, 10);
              if (_.isNaN(intVal) || intVal < 0) {
                return callback(null, {
                  success: false,
                  message: {
                    openResponseMinLength: 'invalid'
                  }
                });
              } else {
                return callback(null, {
                  success: true,
                  transform: [objectKey, 'openResponseMinLength', intVal]
                });
              }
            } else {
              return callback(null, {
                success: true
              });
            }
          };
          maxLengthCheckHelper = function(val, objectKey, object, callback) {
            var intVal;
            if (!_.isUndefined(val)) {
              intVal = parseInt(val, 10);
              if (_.isNaN(intVal) || intVal < 1) {
                return callback(null, {
                  success: false,
                  message: {
                    openResponseMaxLength: 'invalid'
                  }
                });
              } else {
                return callback(null, {
                  success: true,
                  transform: [objectKey, 'openResponseMaxLength', intVal]
                });
              }
            } else {
              return callback(null, {
                success: true
              });
            }
          };
          switch (userType) {
            case 'superAdmin':
              return apiVerifyObjectProperties(this, field, req.body, req, res, false, {
                requiredProperties: {
                  'uid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      return callback(null, {
                        success: false,
                        message: {
                          uid: 'required'
                        }
                      });
                    } else {
                      return field.find({
                        where: {
                          uid: val
                        }
                      }).success(function(resultField) {
                        var mapObj;
                        if (resultField) {
                          mapObj = {};
                          mapObj[val] = resultField;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              uid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  },
                  'name': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'type': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'ordinal': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'multiSelectCorrectRequirement': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'percentageSliderLeft': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'percentageSliderRight': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'openResponseMinLength': function(val, objectKey, object, callback) {
                    return minLengthCheckHelper(val, objectKey, object, callback);
                  },
                  'openResponseMaxLength': function(val, objectKey, object, callback) {
                    return maxLengthCheckHelper(val, objectKey, object, callback);
                  },
                  'dictionaryUid': function(val, objectKey, object, callback) {
                    var fieldType, testClientUid;
                    if (_.isUndefined(object['type'])) {
                      callback(null, {
                        success: false
                      });
                      return;
                    }
                    testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                    fieldType = object['type'];
                    switch (fieldType) {
                      case 'selectIndividual':
                        if (_.isUndefined(val)) {
                          callback(null, {
                            success: false,
                            message: {
                              dictionaryUid: 'required'
                            }
                          });
                          return;
                        }
                        return async.parallel([
                          function(callback) {
                            return client.find({
                              where: {
                                uid: testClientUid
                              }
                            }).success(function(resultClient) {
                              return callback(null, resultClient);
                            });
                          }, function(callback) {
                            return dictionary.find({
                              where: {
                                clientUid: testClientUid,
                                uid: val
                              }
                            }).success(function(resultDictionary) {
                              return callback(null, resultDictionary);
                            });
                          }
                        ], function(error, results) {
                          var mapObj, resultClient, resultDictionary;
                          resultClient = results[0];
                          resultDictionary = results[1];
                          if (!resultDictionary) {
                            callback(null, {
                              success: false,
                              message: {
                                'dictionaryUid': 'unknown'
                              }
                            });
                            return;
                          }
                          if (!resultClient) {
                            callback(null, {
                              success: false,
                              'clientUid': 'unknown'
                            });
                            return;
                          }
                          if (resultDictionary.clientUid !== resultClient.uid) {
                            callback(null, {
                              success: false,
                              message: {
                                'groupUid': 'unknown'
                              }
                            });
                            return;
                          }
                          mapObj = {};
                          mapObj[resultDictionary.uid] = resultDictionary;
                          mapObj[resultClient.uid] = resultClient;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj
                          });
                        });
                      default:
                        return callback(null, {
                          success: false,
                          transform: [objectKey, 'dictionaryUid', null]
                        });
                    }
                  },
                  'groupUid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      callback(null, {
                        success: true
                      });
                      return;
                    }
                    if (_.isUndefined(object['uid'])) {
                      callback(null, {
                        success: true
                      });
                      return;
                    }
                    return async.parallel([
                      function(callback) {
                        return field.find({
                          where: {
                            uid: object['uid']
                          }
                        }).success(function(resultField) {
                          return callback(null, resultField);
                        });
                      }, function(callback) {
                        return group.find({
                          where: {
                            uid: val
                          }
                        }).success(function(resultGroup) {
                          return callback(null, resultGroup);
                        });
                      }
                    ], function(error, results) {
                      var mapObj, resultField, resultGroup;
                      resultField = results[0];
                      resultGroup = results[1];
                      if (!resultGroup) {
                        callback(null, {
                          success: false,
                          message: {
                            'groupUid': 'unknown'
                          }
                        });
                        return;
                      }
                      if (!resultField) {
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      if (resultGroup.clientUid !== resultField.clientUid) {
                        callback(null, {
                          success: false,
                          message: {
                            'groupUid': 'unknown'
                          }
                        });
                        return;
                      }
                      mapObj = {};
                      mapObj[resultGroup.uid] = resultGroup;
                      mapObj[resultField.uid] = resultField;
                      return callback(null, {
                        success: true,
                        uidMapping: mapObj
                      });
                    });
                  }
                }
              }, function(objects) {
                return updateHelper(field, objects, req, res, app);
              });
            case 'clientSuperAdmin':
            case 'clientAdmin':
              return apiVerifyObjectProperties(this, field, req.body, req, res, false, {
                requiredProperties: {
                  'uid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      return callback(null, {
                        success: false,
                        message: {
                          uid: 'required'
                        }
                      });
                    } else {
                      return field.find({
                        where: {
                          clientUid: clientUid,
                          uid: val
                        }
                      }).success(function(resultField) {
                        var mapObj;
                        if (resultField) {
                          mapObj = {};
                          mapObj[val] = resultField;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              uid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  },
                  'name': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'type': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'ordinal': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'multiSelectCorrectRequirement': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'percentageSliderLeft': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'percentageSliderRight': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'openResponseMinLength': function(val, objectKey, object, callback) {
                    return minLengthCheckHelper(val, objectKey, object, callback);
                  },
                  'openResponseMaxLength': function(val, objectKey, object, callback) {
                    return maxLengthCheckHelper(val, objectKey, object, callback);
                  },
                  'groupUid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      callback(null, {
                        success: true
                      });
                      return;
                    }
                    if (_.isUndefined(object['uid'])) {
                      callback(null, {
                        success: true
                      });
                      return;
                    }
                    return async.parallel([
                      function(callback) {
                        return field.find({
                          where: {
                            uid: object['uid']
                          }
                        }).success(function(resultField) {
                          return callback(null, resultField);
                        });
                      }, function(callback) {
                        return group.find({
                          where: {
                            clientUid: clientUid,
                            uid: val
                          }
                        }).success(function(resultGroup) {
                          return callback(null, resultGroup);
                        });
                      }
                    ], function(error, results) {
                      var mapObj, resultField, resultGroup;
                      resultField = results[0];
                      resultGroup = results[1];
                      if (!resultGroup) {
                        callback(null, {
                          success: false,
                          message: {
                            'groupUid': 'unknown'
                          }
                        });
                        return;
                      }
                      if (!resultField) {
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      if (resultGroup.clientUid !== resultField.clientUid) {
                        callback(null, {
                          success: false,
                          message: {
                            'groupUid': 'unknown'
                          }
                        });
                        return;
                      }
                      mapObj = {};
                      mapObj[resultGroup.uid] = resultGroup;
                      mapObj[resultField.uid] = resultField;
                      return callback(null, {
                        success: true,
                        uidMapping: mapObj
                      });
                    });
                  }
                }
              }, function(objects) {
                return updateHelper(field, objects, req, res, app);
              });
            case 'clientDelegate':
            case 'clientAuditor':
              return res.jsonAPIRespond(config.errorResponse(401));
          }
        }
      ]);
    });
  };

}).call(this);
