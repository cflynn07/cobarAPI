// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, activityInsert, apiAuth, apiVerifyObjectProperties, async, config, insertHelper, redisClient, sequelize, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  insertHelper = require(GLOBAL.appRoot + 'components/insertHelper');

  activityInsert = require(GLOBAL.appRoot + 'components/activityInsert');

  sequelize = ORM.setup();

  redisClient = require(GLOBAL.appRoot + 'components/redis').createClient();

  module.exports = function(app) {
    var client, employee, event, eventParticipant, revision;
    employee = ORM.model('employee');
    client = ORM.model('client');
    event = ORM.model('event');
    revision = ORM.model('revision');
    eventParticipant = ORM.model('eventParticipant');
    return app.post(config.apiSubDir + '/v1/events', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var checkParticipantsUidsHelper, clientUid, employeeUid, insertEventParticipantsHelper, insertMethod, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          employeeUid = req.session.user.uid;
          config.resourceModelUnknownFieldsExceptions['event'] = ['participantsUids'];
          insertEventParticipantsHelper = function(uid, objects, completeCallback) {
            var error, item;
            try {
              item = objects[0];
              if (_.isString(uid) && _.isUndefined(uid.code) && item.participantsUids) {
                return event.find({
                  where: {
                    uid: uid
                  }
                }).success(function(resultEvent) {
                  return async.map(item.participantsUids, function(item, callback) {
                    var insertUid;
                    insertUid = uuid.v4();
                    return eventParticipant.create({
                      uid: insertUid,
                      clientUid: item.clientUid,
                      employeeUid: item.uid,
                      eventUid: resultEvent.uid,
                      clientId: item.clientId,
                      employeeId: item.id,
                      eventId: resultEvent.id
                    }).success(function(resultEventParticipant) {
                      return callback(null);
                    });
                  }, function(err, results) {
                    return completeCallback(uid);
                  });
                });
              } else {
                return completeCallback(uid);
              }
            } catch (_error) {
              error = _error;
              return console.log(error);
            }
          };
          checkParticipantsUidsHelper = function(val, objectKey, object, callback) {
            var tempUUID, _i, _len;
            if (_.isUndefined(val)) {
              callback(null, {
                success: true
              });
              return;
            }
            if (!_.isArray(val) || _.isString(val)) {
              callback(null, {
                success: false,
                message: {
                  participantsUids: 'invalid'
                }
              });
              return;
            }
            for (_i = 0, _len = val.length; _i < _len; _i++) {
              tempUUID = val[_i];
              if (!config.isValidUUID(tempUUID)) {
                callback(null, {
                  success: false,
                  message: {
                    participantsUids: 'invalid'
                  }
                });
                return;
              }
            }
            return async.map(val, function(item, callback) {
              return employee.find({
                where: {
                  uid: item,
                  clientUid: clientUid
                }
              }).success(function(resultEmployee) {
                if (!resultEmployee) {
                  return callback(new Error());
                } else {
                  return callback(null, resultEmployee);
                }
              });
            }, function(err, results) {
              if (err) {
                return callback(null, {
                  success: false,
                  message: {
                    participantsUids: 'unknown employee uids'
                  }
                });
              } else {
                return callback(null, {
                  success: true,
                  transform: [objectKey, 'participantsUids', results]
                });
              }
            });
          };
          switch (userType) {
            case 'superAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, event, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'name': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            name: 'required'
                          }
                        });
                      }
                    },
                    'dateTime': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true,
                          transform: [objectKey, 'dateTime', new Date(val)]
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            dateTime: 'required'
                          }
                        });
                      }
                    },
                    'revisionUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            revisionUid: 'required'
                          }
                        });
                        return;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return revision.find({
                        where: {
                          uid: val,
                          clientUid: testClientUid
                        }
                      }).success(function(resultRevision) {
                        var mapObj;
                        if (!resultRevision) {
                          return callback(null, {
                            success: false,
                            message: {
                              revisionUid: 'unknown'
                            }
                          });
                        } else {
                          mapObj = {};
                          mapObj[resultRevision.uid] = resultRevision;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj,
                            transform: [objectKey, 'revisionUid', val]
                          });
                        }
                      });
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return callback(null, {
                        success: true,
                        transform: [objectKey, 'clientUid', testClientUid]
                      });
                    },
                    'employeeUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val)) {
                        val = employeeUid;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return async.parallel([
                        function(callback) {
                          return client.find({
                            where: {
                              uid: testClientUid
                            }
                          }).success(function(resultClient) {
                            return callback(null, resultClient);
                          });
                        }, function(callback) {
                          return employee.find({
                            where: {
                              clientUid: testClientUid,
                              uid: val
                            }
                          }).success(function(resultEmployee) {
                            return callback(null, resultEmployee);
                          });
                        }
                      ], function(error, results) {
                        var mapObj, resultClient, resultEmployee;
                        resultClient = results[0];
                        resultEmployee = results[1];
                        if (!resultEmployee) {
                          callback(null, {
                            success: false,
                            message: {
                              employeeUid: 'unknown'
                            }
                          });
                          return;
                        }
                        if (!resultClient) {
                          callback(null, {
                            success: false,
                            message: {
                              clientUid: 'unknown'
                            }
                          });
                          return;
                        }
                        if (resultEmployee.clientUid !== resultClient.uid) {
                          callback(null, {
                            success: false,
                            message: {
                              employeeUid: 'unknown'
                            }
                          });
                          return;
                        }
                        mapObj = {};
                        mapObj[resultEmployee.uid] = resultEmployee;
                        mapObj[resultClient.uid] = resultClient;
                        return callback(null, {
                          success: true,
                          uidMapping: mapObj,
                          transform: [objectKey, 'employeeUid', val]
                        });
                      });
                    },
                    'participantsUids': function(val, objectKey, object, callback) {
                      return checkParticipantsUidsHelper(val, objectKey, object, callback);
                    }
                  }
                }, function(objects) {
                  return insertHelper('events', clientUid, event, objects, req, res, app, function(uid) {
                    redisClient.publish('eventCronChannel', uid);
                    return insertEventParticipantsHelper(uid, objects, function(uid) {
                      if (_.isFunction(insertMethodCallback)) {
                        return insertMethodCallback.call(this, uid);
                      } else {
                        return config.apiSuccessPostResponse(res, uid);
                      }
                    });
                  });
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body);
              }
              break;
            case 'clientSuperAdmin':
            case 'clientAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, event, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'name': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            name: 'required'
                          }
                        });
                      }
                    },
                    'dateTime': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true,
                          transform: [objectKey, 'dateTime', new Date(val)]
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            dateTime: 'required'
                          }
                        });
                      }
                    },
                    'revisionUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            revisionUid: 'required'
                          }
                        });
                        return;
                      }
                      testClientUid = clientUid;
                      return revision.find({
                        where: {
                          uid: val,
                          clientUid: testClientUid
                        }
                      }).success(function(resultRevision) {
                        var mapObj;
                        if (!resultRevision) {
                          return callback(null, {
                            success: false,
                            message: {
                              revisionUid: 'unknown'
                            }
                          });
                        } else {
                          mapObj = {};
                          mapObj[resultRevision.uid] = resultRevision;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj,
                            transform: [objectKey, 'revisionUid', val]
                          });
                        }
                      });
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (!_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            clientUid: 'unknown'
                          }
                        });
                        return;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return callback(null, {
                        success: true,
                        transform: [objectKey, 'clientUid', testClientUid]
                      });
                    },
                    'employeeUid': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val)) {
                        val = employeeUid;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return async.parallel([
                        function(callback) {
                          return client.find({
                            where: {
                              uid: testClientUid
                            }
                          }).success(function(resultClient) {
                            return callback(null, resultClient);
                          });
                        }, function(callback) {
                          return employee.find({
                            where: {
                              clientUid: testClientUid,
                              uid: val
                            }
                          }).success(function(resultEmployee) {
                            return callback(null, resultEmployee);
                          });
                        }
                      ], function(error, results) {
                        var mapObj, resultClient, resultEmployee;
                        resultClient = results[0];
                        resultEmployee = results[1];
                        if (!resultEmployee) {
                          callback(null, {
                            success: false,
                            message: {
                              employeeUid: 'unknown'
                            }
                          });
                          return;
                        }
                        if (!resultClient) {
                          callback(null, {
                            success: false,
                            message: {
                              clientUid: 'unknown'
                            }
                          });
                          return;
                        }
                        if (resultEmployee.clientUid !== resultClient.uid) {
                          callback(null, {
                            success: false,
                            message: {
                              employeeUid: 'unknown'
                            }
                          });
                          return;
                        }
                        mapObj = {};
                        mapObj[resultEmployee.uid] = resultEmployee;
                        mapObj[resultClient.uid] = resultClient;
                        return callback(null, {
                          success: true,
                          uidMapping: mapObj,
                          transform: [objectKey, 'employeeUid', val]
                        });
                      });
                    },
                    'participantsUids': function(val, objectKey, object, callback) {
                      return checkParticipantsUidsHelper(val, objectKey, object, callback);
                    }
                  }
                }, function(objects) {
                  return insertHelper('events', clientUid, event, objects, req, res, app, function(uid) {
                    redisClient.publish('eventCronChannel', uid);
                    return insertEventParticipantsHelper(uid, objects, function(uid) {
                      if (_.isFunction(insertMethodCallback)) {
                        return insertMethodCallback.call(this, uid);
                      } else {
                        return config.apiSuccessPostResponse(res, uid);
                      }
                    });
                  });
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body, function(uid) {
                  if (_.isString(uid) && _.isUndefined(uid.code)) {
                    config.apiSuccessPostResponse(res, uid);
                    return activityInsert({
                      type: 'createEvent',
                      eventUid: uid,
                      employeeUid: employeeUid,
                      clientUid: clientUid
                    }, app, req);
                  } else {
                    return res.jsonAPIRespond(uid);
                  }
                });
              }
              break;
            case 'clientDelegate':
            case 'clientAuditor':
              return res.jsonAPIRespond(config.errorResponse(401));
          }
        }
      ]);
    });
  };

}).call(this);
