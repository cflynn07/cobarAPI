// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, activityInsert, apiAuth, apiVerifyObjectProperties, async, config, insertHelper, sequelize, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  insertHelper = require(GLOBAL.appRoot + 'components/insertHelper');

  activityInsert = require(GLOBAL.appRoot + 'components/activityInsert');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var bulkObjectsIndex, client, employee;
    employee = ORM.model('employee');
    client = ORM.model('client');
    bulkObjectsIndex = 0;
    return app.post(config.apiSubDir + '/v1/employees', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, insertMethod, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          switch (userType) {
            case 'superAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, employee, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'identifier': function(val, objectKey, object, callback) {
                      var testClientUid;
                      callback(null, {
                        success: true
                      });
                      return;
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return employee.find({
                        where: {
                          clientUid: testClientUid,
                          identifier: val
                        }
                      }).success(function(resultEmployee) {
                        if (resultEmployee) {
                          return callback(null, {
                            success: false,
                            message: {
                              identifier: 'duplicate'
                            }
                          });
                        } else {
                          return callback(null, {
                            success: true
                          });
                        }
                      });
                    },
                    'firstName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            firstName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'lastName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            lastName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'email': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            email: 'required'
                          }
                        });
                        return;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return employee.find({
                        where: {
                          clientUid: testClientUid,
                          email: val
                        }
                      }).success(function(resultEmployee) {
                        if (resultEmployee) {
                          return callback(null, {
                            success: false,
                            message: {
                              email: 'duplicate'
                            }
                          });
                        } else {
                          return callback(null, {
                            success: true
                          });
                        }
                      });
                    },
                    'phone': function(val, objectKey, object, callback) {
                      var testClientUid;
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            phone: 'required'
                          }
                        });
                        return;
                      }
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return employee.find({
                        where: {
                          clientUid: testClientUid,
                          phone: val
                        }
                      }).success(function(resultEmployee) {
                        if (resultEmployee) {
                          return callback(null, {
                            success: false,
                            message: {
                              phone: 'duplicate'
                            }
                          });
                        } else {
                          return callback(null, {
                            success: true
                          });
                        }
                      });
                    },
                    'username': function(val, objectKey, object, callback) {
                      var testClientUid;
                      callback(null, {
                        success: true
                      });
                      return;
                      testClientUid = !_.isUndefined(object['clientUid']) ? object['clientUid'] : clientUid;
                      return employee.find({
                        where: {
                          clientUid: testClientUid,
                          username: val
                        }
                      }).success(function(resultEmployee) {
                        if (resultEmployee) {
                          return callback(null, {
                            success: false,
                            message: {
                              username: 'duplicate'
                            }
                          });
                        } else {
                          return callback(null, {
                            success: true
                          });
                        }
                      });
                    },
                    'password': function(val, objectKey, object, callback) {
                      callback(null, {
                        success: true
                      });
                      return;
                      if (_.isUndefined(val) || val.length > 100) {
                        callback(null, {
                          success: false
                        });
                        return;
                      }
                      return bcrypt.genSalt(10, function(err, salt) {
                        return bcrypt.hash(val, salt, function(err, hash) {
                          return callback(null, {
                            success: false,
                            transform: [object, 'password', hash]
                          });
                        });
                      });
                    },
                    'type': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val)) {
                        object[objectKey] = 'clientDelegate';
                      }
                      return callback(null, {
                        success: false
                      });
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val)) {
                        return client.find({
                          where: {
                            uid: clientUid
                          }
                        }).success(function(resultClient) {
                          var mapObj;
                          if (resultClient) {
                            mapObj = {};
                            mapObj[resultClient.uid] = resultClient;
                            return callback(null, {
                              success: true,
                              uidMapping: mapObj,
                              transform: [objectKey, 'clientUid', resultClient.uid]
                            });
                          } else {
                            return callback(null, {
                              success: false,
                              message: {
                                clientUid: 'unknown'
                              }
                            });
                          }
                        });
                      } else {
                        return client.find({
                          where: {
                            uid: val
                          }
                        }).success(function(resultClient) {
                          var mapObj;
                          if (resultClient) {
                            mapObj = {};
                            mapObj[resultClient.uid] = resultClient;
                            return callback(null, {
                              success: true,
                              uidMapping: mapObj,
                              transform: [objectKey, 'clientUid', resultClient.uid]
                            });
                          } else {
                            return callback(null, {
                              success: false,
                              message: {
                                clientUid: 'unknown'
                              }
                            });
                          }
                        });
                      }
                    }
                  }
                }, function(objects) {
                  return insertHelper('employees', clientUid, employee, objects, req, res, app, insertMethodCallback);
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body);
              }
              break;
            case 'clientSuperAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, employee, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'identifier': function(val, objectKey, object, callback) {
                      callback(null, {
                        success: true
                      });
                    },
                    'firstName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            firstName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'lastName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            lastName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'email': function(val, objectKey, object, callback) {
                      var sql;
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            email: 'required'
                          }
                        });
                        return;
                      }
                      if (_.isUndefined(object['phone'])) {
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      sql = ORM.SEQ.Utils.format(['SELECT * FROM employees WHERE email = ? or phone = ? LIMIT 1', val, object['phone']]);
                      console.log(sql);
                      return sequelize.query(sql).success(function(resultEmployee) {
                        var errorMsg;
                        if (!resultEmployee || (resultEmployee.length === 0)) {
                          callback(null, {
                            success: true
                          });
                          return;
                        }
                        errorMsg = {};
                        if (resultEmployee.phone === object['phone']) {
                          errorMsg.phone = 'duplicate';
                        }
                        if (resultEmployee.email === val) {
                          errorMsg.email = 'duplicate';
                        }
                        return callback(null, {
                          success: false,
                          message: errorMsg
                        });
                      });
                      /*
                      #Verify no duplicates
                      testClientUid = clientUid # if (!_.isUndefined object['clientUid']) then object['clientUid'] else clientUid
                      employee.find(
                        where:
                          clientUid: testClientUid
                          email: val
                      ).success (resultEmployee) ->
                        #Cant be duplicates
                        if resultEmployee
                          callback null,
                            success: false
                            message:
                              email: 'duplicate'
                        else
                          callback null,
                            success: true
                      */

                    },
                    'phone': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            phone: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                      /*
                      #Verify no duplicates
                      testClientUid = clientUid # if (!_.isUndefined object['clientUid']) then object['clientUid'] else clientUid
                      employee.find(
                        where:
                          clientUid: testClientUid
                          phone: val
                      ).success (resultEmployee) ->
                        #Cant be duplicates
                        if resultEmployee
                          callback null,
                            success: false
                            message:
                              phone: 'duplicate'
                        else
                          callback null,
                            success: true
                      */

                    },
                    'username': function(val, objectKey, object, callback) {
                      return callback(null, {
                        success: true
                      });
                    },
                    'password': function(val, objectKey, object, callback) {
                      callback(null, {
                        success: true
                      });
                      return;
                      if (_.isUndefined(val) || val.length > 100) {
                        callback(null, {
                          success: false
                        });
                        return;
                      }
                      return bcrypt.genSalt(10, function(err, salt) {
                        return bcrypt.hash(val, salt, function(err, hash) {
                          return callback(null, {
                            success: false,
                            transform: [object, 'password', hash]
                          });
                        });
                      });
                    },
                    'type': function(val, objectKey, object, callback) {
                      if (val === 'superAdmin') {
                        callback(null, {
                          success: false,
                          message: {
                            type: 'invalid'
                          }
                        });
                        return;
                      }
                      if (_.isUndefined(val)) {
                        object['type'] = 'clientDelegate';
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      return callback(null, {
                        success: false
                      });
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            clientUid: 'unknown'
                          }
                        });
                      }
                      return client.find({
                        where: {
                          uid: clientUid
                        }
                      }).success(function(resultClient) {
                        var mapObj;
                        if (resultClient) {
                          mapObj = {};
                          mapObj[resultClient.uid] = resultClient;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj,
                            transform: [objectKey, 'clientUid', resultClient.uid]
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              clientUid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  }
                }, function(objects) {
                  console.log('finish');
                  console.log(objects);
                  return insertHelper('employees', clientUid, employee, objects, req, res, app, insertMethodCallback);
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    console.log('insertMethodCallback');
                    console.log(arguments);
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body, function(uid) {
                  if (_.isString(uid) && _.isUndefined(uid.code)) {
                    config.apiSuccessPostResponse(res, uid);
                    return activityInsert({
                      type: 'createEmployee',
                      employeeUid: uid,
                      clientUid: clientUid
                    }, app, req);
                  } else {
                    return res.jsonAPIRespond(uid);
                  }
                });
              }
              break;
            case 'clientAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, employee, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'identifier': function(val, objectKey, object, callback) {
                      callback(null, {
                        success: true
                      });
                    },
                    'firstName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            firstName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'lastName': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            lastName: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'email': function(val, objectKey, object, callback) {
                      var sql;
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            email: 'required'
                          }
                        });
                        return;
                      }
                      if (_.isUndefined(object['phone'])) {
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      sql = ORM.SEQ.Utils.format(['SELECT * FROM employees WHERE email = ? or phone = ? LIMIT 1', val, object['phone']]);
                      console.log(sql);
                      return sequelize.query(sql).success(function(resultEmployee) {
                        var errorMsg;
                        if (!resultEmployee || (resultEmployee.length === 0)) {
                          callback(null, {
                            success: true
                          });
                          return;
                        }
                        errorMsg = {};
                        if (resultEmployee.phone === object['phone']) {
                          errorMsg.phone = 'duplicate';
                        }
                        if (resultEmployee.email === val) {
                          errorMsg.email = 'duplicate';
                        }
                        return callback(null, {
                          success: false,
                          message: errorMsg
                        });
                      });
                      /*
                      #Verify no duplicates
                      testClientUid = clientUid # if (!_.isUndefined object['clientUid']) then object['clientUid'] else clientUid
                      employee.find(
                        where:
                          clientUid: testClientUid
                          email: val
                      ).success (resultEmployee) ->
                        #Cant be duplicates
                        if resultEmployee
                          callback null,
                            success: false
                            message:
                              email: 'duplicate'
                        else
                          callback null,
                            success: true
                      */

                    },
                    'phone': function(val, objectKey, object, callback) {
                      if (_.isUndefined(val) || val === '') {
                        callback(null, {
                          success: false,
                          message: {
                            phone: 'required'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                      /*
                      #Verify no duplicates
                      testClientUid = clientUid # if (!_.isUndefined object['clientUid']) then object['clientUid'] else clientUid
                      employee.find(
                        where:
                          clientUid: testClientUid
                          phone: val
                      ).success (resultEmployee) ->
                        #Cant be duplicates
                        if resultEmployee
                          callback null,
                            success: false
                            message:
                              phone: 'duplicate'
                        else
                          callback null,
                            success: true
                      */

                    },
                    'username': function(val, objectKey, object, callback) {
                      return callback(null, {
                        success: true
                      });
                    },
                    'password': function(val, objectKey, object, callback) {
                      callback(null, {
                        success: true
                      });
                      return;
                      if (_.isUndefined(val) || val.length > 100) {
                        callback(null, {
                          success: false
                        });
                        return;
                      }
                      return bcrypt.genSalt(10, function(err, salt) {
                        return bcrypt.hash(val, salt, function(err, hash) {
                          return callback(null, {
                            success: false,
                            transform: [object, 'password', hash]
                          });
                        });
                      });
                    },
                    'type': function(val, objectKey, object, callback) {
                      if (val === 'superAdmin' || val === 'clientSuperAdmin') {
                        callback(null, {
                          success: false,
                          message: {
                            type: 'invalid'
                          }
                        });
                        return;
                      }
                      if (_.isUndefined(val)) {
                        object['type'] = 'clientDelegate';
                        callback(null, {
                          success: true
                        });
                        return;
                      }
                      return callback(null, {
                        success: false
                      });
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            clientUid: 'unknown'
                          }
                        });
                      }
                      return client.find({
                        where: {
                          uid: clientUid
                        }
                      }).success(function(resultClient) {
                        var mapObj;
                        if (resultClient) {
                          mapObj = {};
                          mapObj[resultClient.uid] = resultClient;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj,
                            transform: [objectKey, 'clientUid', resultClient.uid]
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              clientUid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  }
                }, function(objects) {
                  return insertHelper('employees', clientUid, employee, objects, req, res, app, insertMethodCallback);
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body, function() {
                  if (_.isString(uid) && _.isUndefined(uid.code)) {
                    config.apiSuccessPostResponse(res, uid);
                    return activityInsert({
                      type: 'createEmployee',
                      employeeUid: uid,
                      clientUid: clientUid
                    }, app, req);
                  } else {
                    return res.jsonAPIRespond(uid);
                  }
                });
              }
              break;
            case 'clientDelegate':
            case 'clientAuditor':
              return res.jsonAPIRespond(config.errorResponse(401));
          }
        }
      ]);
    });
  };

}).call(this);
