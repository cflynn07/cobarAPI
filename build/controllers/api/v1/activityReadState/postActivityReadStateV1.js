// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, apiAuth, apiVerifyObjectProperties, async, config, insertHelper, sequelize, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  insertHelper = require(GLOBAL.appRoot + 'components/insertHelper');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var activity, client;
    client = ORM.model('client');
    activity = ORM.model('activity');
    return app.post(config.apiSubDir + '/v1/activityreadstate', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, customInsertMethod, employeeUid, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          employeeUid = req.session.user.uid;
          customInsertMethod = function(body, req, res, app) {
            var activityUid, e, _i, _j, _len, _len1;
            if (!_.isArray(body)) {
              body = [body];
            }
            for (_i = 0, _len = body.length; _i < _len; _i++) {
              activityUid = body[_i];
              if (!_.isString(activityUid)) {
                res.jsonAPIRespond(config.apiErrorResponse('unknownRootResourceId'));
                return;
              }
            }
            for (_j = 0, _len1 = body.length; _j < _len1; _j++) {
              activityUid = body[_j];
              try {
                (function(activityUid) {
                  return sequelize.query("INSERT INTO activitiesReadState VALUES (NULL, \'" + employeeUid + "\', \'" + activityUid + "\', \'" + clientUid + "\')", null, {
                    raw: true
                  }).done(function(err, queryResults) {
                    return activity.find({
                      where: {
                        uid: activityUid
                      }
                    }).success(function(activityResult) {
                      if (!activityResult) {
                        return;
                      }
                      if (_.isArray(activityResult)) {
                        activityResult = activityResult[0];
                      }
                      if (!_.isUndefined(app.io) && _.isFunction(app.io.room)) {
                        activityResult = JSON.parse(JSON.stringify(activityResult));
                        activityResult.readState = true;
                        return app.io.room(employeeUid + '-' + activityResult.uid).broadcast('resourcePut', {
                          uid: activityResult.uid,
                          readState: true
                        });
                      }
                    });
                  });
                })(activityUid);
              } catch (_error) {
                e = _error;
                console.log(e);
              }
            }
            return res.jsonAPIRespond(config.response(201));
          };
          switch (userType) {
            case 'superAdmin':
              return customInsertMethod(req.body, req, res, app);
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              return customInsertMethod(req.body, req, res, app);
          }
        }
      ]);
    });
  };

}).call(this);
