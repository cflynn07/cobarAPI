// Generated by CoffeeScript 1.6.3
(function() {
  var async, config, _;

  _ = require('underscore');

  async = require('async');

  config = require(GLOBAL.appRoot + 'config/config');

  module.exports = function(postObjects, resourceModel) {
    var errorObj, key, object, objectValidationErrors, propertyName, propertyValue, testAttribute, _i, _len;
    objectValidationErrors = [];
    /*
    console.log 'resourceModel.name'
    console.log resourceModel.name
    console.log 'resourceModel.rawAttributes'
    console.log resourceModel.rawAttributes
    */

    for (key = _i = 0, _len = postObjects.length; _i < _len; key = ++_i) {
      object = postObjects[key];
      for (propertyName in object) {
        propertyValue = object[propertyName];
        testAttribute = resourceModel.rawAttributes[propertyName];
        if (!_.isUndefined(testAttribute)) {
          if (testAttribute.type && (testAttribute.type === 'ENUM')) {
            if (testAttribute.values.indexOf(propertyValue) === -1) {
              errorObj = {};
              errorObj[propertyName] = 'invalid value';
              objectValidationErrors.push(errorObj);
            }
          }
          if (!_.isUndefined(testAttribute.validate)) {
            if (!_.isUndefined(testAttribute.validate.isAlphanumeric) && testAttribute.validate.isAlphanumeric) {
              if ((propertyValue.length > 0) && !propertyValue.match(/^[ 0-9a-zA-Z]+$/)) {
                errorObj = {};
                errorObj[propertyName] = 'must be alphanumeric';
                objectValidationErrors.push(errorObj);
              }
            }
            if (!_.isUndefined(testAttribute.validate.len) && _.isArray(testAttribute.validate.len)) {
              if ((propertyValue.length < testAttribute.validate.len[0]) || (propertyValue.length > testAttribute.validate.len[1])) {
                errorObj = {};
                errorObj[propertyName] = 'length must be between ' + testAttribute.validate.len[0] + ' and ' + testAttribute.validate.len[1];
                objectValidationErrors.push(errorObj);
              }
            }
            if (testAttribute.type && (testAttribute.type === 'INTEGER')) {
              if (!/^\d+$/.test(propertyValue + '')) {
                errorObj = {};
                errorObj[propertyName] = 'invalid value';
                objectValidationErrors.push(errorObj);
              }
            }
          }
        }
      }
    }
    return objectValidationErrors;
  };

}).call(this);
