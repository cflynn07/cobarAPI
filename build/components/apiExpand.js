// Generated by CoffeeScript 1.6.3
/*
Module for managing api resource expansion relationships,
permissions, and validation
*/


(function() {
  var ORM, async, config, sanitize, sequelize, _;

  _ = require('underscore');

  async = require('async');

  sanitize = require('validator').sanitize;

  config = require(GLOBAL.appRoot + 'config/config');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  sequelize = ORM.setup();

  module.exports = function(req, res, resource, resourceQueryParams) {
    var checkFilterQueryProperty, checkOrderQueryProperty, checkPropertiesAgainstResource, connector, e, filterArr, filters, findCopy, firstLevelIncludeModels, firstLevelIncludeObject, firstLevelIncludedModelName, firstLevelIncludedResourceName, isExtendShallowerThanThree, isValidExtend, isValidExtendAssociation, item, limit, maxLimit, newValString, offset, order, orderArray, orders, prop, recursiveCleanProps, secondLevelExpandIncludeObject, secondLevelIncludeObjects, sendFinalResult, val, verifyNoUnknownResource, whereString, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2;
    isValidExtend = function(req) {
      var checkHelper, e;
      checkHelper = function(expandArray) {
        var v, _i, _len;
        for (_i = 0, _len = expandArray.length; _i < _len; _i++) {
          v = expandArray[_i];
          if (!_.isObject(v)) {
            return false;
          }
          if (!_.isString(v.resource)) {
            return false;
          }
          if (!_.isUndefined(v.expand)) {
            if (_.isArray(v.expand)) {
              return checkHelper(v.expand);
            } else {
              return false;
            }
          } else {
            return true;
          }
        }
      };
      if (!_.isUndefined(req.apiExpand)) {
        if (_.isArray(req.apiExpand)) {
          return checkHelper(req.apiExpand);
        } else if (_.isString(req.apiExpand)) {
          try {
            req.apiExpand = JSON.parse(req.apiExpand);
          } catch (_error) {
            e = _error;
            return false;
          }
          return checkHelper(req.apiExpand);
        }
      } else {
        req.apiExpand = [];
        return true;
      }
    };
    isValidExtendAssociation = function(resource, req) {
      var downstreamAssociations, extendedModels, item, name, v, _i, _len, _ref, _ref1;
      extendedModels = [];
      downstreamAssociations = [];
      _ref = resource.associations;
      for (name in _ref) {
        item = _ref[name];
        if (item.associationType.toLowerCase() === 'hasmany') {
          downstreamAssociations.push(item.target.name + 's');
        }
        if (item.associationType.toLowerCase() === 'hasone') {
          downstreamAssociations.push(item.target.name);
        }
        if (item.associationType.toLowerCase() === 'belongsto') {
          downstreamAssociations.push(item.target.name);
        }
      }
      _ref1 = req.apiExpand;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (downstreamAssociations.indexOf(v.resource) === -1) {
          return false;
        }
        if (extendedModels.indexOf(v.resource) !== -1) {
          return false;
        }
        extendedModels.push(v.resource);
      }
      return true;
    };
    /*
    Determine if any tree branch extends beyond 2 levels
    */

    isExtendShallowerThanThree = function(req) {
      var maxLvl, recursiveHelper;
      maxLvl = 2;
      if (_.isUndefined(req.apiExpand)) {
        return true;
      }
      recursiveHelper = function(exp, lvl) {
        var childNodesTests, key, val, _i, _j, _len, _len1;
        if (lvl > maxLvl) {
          return false;
        }
        childNodesTests = [];
        for (key = _i = 0, _len = exp.length; _i < _len; key = ++_i) {
          val = exp[key];
          if (!_.isUndefined(val.expand)) {
            childNodesTests.push(recursiveHelper(val.expand, lvl + 1));
          }
        }
        for (_j = 0, _len1 = childNodesTests.length; _j < _len1; _j++) {
          val = childNodesTests[_j];
          if (val === false) {
            return false;
          }
        }
        return true;
      };
      return recursiveHelper(req.apiExpand, 1);
    };
    recursiveCleanProps = function(arr) {
      var objectPropStepper, subResult, _i, _len, _results;
      objectPropStepper = function(subResult) {
        var subResultPropertyKey, subResultPropertyValue, _results;
        _results = [];
        for (subResultPropertyKey in subResult) {
          subResultPropertyValue = subResult[subResultPropertyKey];
          if (_.isArray(subResultPropertyValue)) {
            _results.push(recursiveCleanProps(subResultPropertyValue));
          } else if (_.isObject(subResultPropertyValue) && !_.isArray(subResultPropertyValue)) {
            _results.push(objectPropStepper(subResultPropertyValue));
          } else {
            if ((subResultPropertyKey === 'id') || (subResultPropertyKey === 'password')) {
              delete subResult[subResultPropertyKey];
            }
            if (subResultPropertyKey.indexOf('Id') > -1) {
              _results.push(delete subResult[subResultPropertyKey]);
            } else {
              _results.push(void 0);
            }
          }
        }
        return _results;
      };
      _results = [];
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        subResult = arr[_i];
        _results.push(objectPropStepper(subResult));
      }
      return _results;
    };
    verifyNoUnknownResource = function(topResult, find) {
      var found, result, specUid, unknownUids, _i, _j, _len, _len1, _ref;
      topResult = JSON.parse(JSON.stringify(topResult));
      if (!find.where || !find.where.uid) {
        return true;
      }
      if (topResult.length === find.where.uid.length) {
        return true;
      }
      unknownUids = [];
      if (_.isArray(find.where.uid)) {
        _ref = find.where.uid;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          specUid = _ref[_i];
          found = false;
          for (_j = 0, _len1 = topResult.length; _j < _len1; _j++) {
            result = topResult[_j];
            if (result.uid === specUid) {
              found = true;
              break;
            }
          }
          if (!found) {
            unknownUids.push(specUid);
          }
        }
      }
      res.jsonAPIRespond(_.extend(config.apiErrorResponse('unknownRootResourceId'), {
        unknownUids: unknownUids
      }));
      return false;
    };
    sendFinalResult = function(topResult, topSetLen) {
      var recursiveBindToRooms, returnResult, roomName, topResultJSON;
      topResultJSON = JSON.parse(JSON.stringify(topResult));
      recursiveCleanProps(topResultJSON);
      if (_.isArray(topResultJSON) && topResultJSON.length === 1) {
        topResultJSON = topResultJSON[0];
      }
      if (!_.isArray(topResultJSON) && resourceQueryParams.searchExpectsMultiple) {
        topResultJSON = [topResultJSON];
      }
      returnResult = {
        data: topResultJSON,
        length: topSetLen,
        offset: resourceQueryParams.find.offset,
        limit: resourceQueryParams.find.limit
      };
      res.jsonAPIRespond({
        code: 200,
        response: returnResult
      });
      if (!_.isUndefined(req.io) && _.isFunction(req.io.join)) {
        if (!_.isUndefined(req.session) && !_.isUndefined(req.session.user) && !_.isUndefined(req.session.user.clientUid)) {
          roomName = req.session.user.clientUid + '-postResources';
          req.io.join(roomName);
        }
        recursiveBindToRooms = function(collection) {
          var obj, propertyName, propertyValue, _i, _len, _results;
          if (!_.isArray(collection)) {
            collection = [collection];
          }
          _results = [];
          for (_i = 0, _len = collection.length; _i < _len; _i++) {
            obj = collection[_i];
            if (!_.isUndefined(obj['uid'])) {
              req.io.join(obj.uid);
            }
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (propertyName in obj) {
                propertyValue = obj[propertyName];
                if (_.isArray(propertyValue)) {
                  _results1.push(recursiveBindToRooms(propertyValue));
                } else if (_.isObject(propertyValue) && !_.isUndefined(propertyValue.uid)) {
                  _results1.push(recursiveBindToRooms(propertyValue));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          }
          return _results;
        };
        return recursiveBindToRooms(topResultJSON);
      }
    };
    /*
    STANDARD CHECKS...
    */

    if (!isValidExtend(req)) {
      res.jsonAPIRespond(config.apiErrorResponse('invalidExpandJSON'));
      return;
    }
    if (!isValidExtendAssociation(resource, req)) {
      res.jsonAPIRespond(config.apiErrorResponse('unknownExpandResource'));
      return;
    }
    if (!isExtendShallowerThanThree(req)) {
      res.jsonAPIRespond(config.apiErrorResponse('nestedTooDeep'));
      return;
    }
    firstLevelIncludeModels = [];
    secondLevelIncludeObjects = {};
    _ref = req.apiExpand;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      firstLevelIncludeObject = _ref[_i];
      firstLevelIncludedResourceName = firstLevelIncludeObject.resource;
      firstLevelIncludedModelName = firstLevelIncludeObject.resource.replace(/s+$/, '');
      firstLevelIncludeModels.push(ORM.model(firstLevelIncludedModelName));
      if (_.isArray(firstLevelIncludeObject.expand)) {
        _ref1 = firstLevelIncludeObject.expand;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          secondLevelExpandIncludeObject = _ref1[_j];
          if (_.isUndefined(secondLevelIncludeObjects[firstLevelIncludedResourceName])) {
            secondLevelIncludeObjects[firstLevelIncludedResourceName] = [secondLevelExpandIncludeObject];
          } else {
            secondLevelIncludeObjects[firstLevelIncludedResourceName].push(secondLevelExpandIncludeObject);
          }
        }
      }
    }
    if (firstLevelIncludeModels.length > 0) {
      resourceQueryParams.find.include = firstLevelIncludeModels;
    }
    maxLimit = 300;
    resourceQueryParams.find.offset = 0;
    resourceQueryParams.find.limit = maxLimit;
    if (!_.isUndefined(req.query.limit)) {
      limit = Math.floor(parseInt(req.query.limit, 10));
      if (!_.isNaN(limit) && _.isNumber(limit)) {
        if (limit <= maxLimit) {
          resourceQueryParams.find.limit = limit;
        }
      }
    }
    if (!_.isUndefined(req.query.offset)) {
      offset = Math.floor(parseInt(req.query.offset, 10));
      if (!_.isNaN(offset) && _.isNumber(offset)) {
        resourceQueryParams.find.offset = offset;
      }
    }
    if (!_.isUndefined(resourceQueryParams.find) && !_.isUndefined(resourceQueryParams.find.where) && !_.isUndefined(resourceQueryParams.find.where.uid)) {
      if (!_.isArray(resourceQueryParams.find.where.uid)) {
        resourceQueryParams.find.where.uid = [resourceQueryParams.find.where.uid];
      }
    }
    checkOrderQueryProperty = function(order) {
      var subVal, val, _k, _l, _len2, _len3, _len4, _m;
      if (!_.isArray(order)) {
        return false;
      }
      for (_k = 0, _len2 = order.length; _k < _len2; _k++) {
        val = order[_k];
        if (!_.isArray(val) || val.length !== 2) {
          return false;
        }
        for (_l = 0, _len3 = val.length; _l < _len3; _l++) {
          subVal = val[_l];
          if (!_.isString(subVal)) {
            return false;
          }
        }
      }
      for (_m = 0, _len4 = order.length; _m < _len4; _m++) {
        val = order[_m];
        if (!checkPropertiesAgainstResource(val[0])) {
          return false;
        }
        if ((val[1].toLowerCase() !== 'asc') && (val[1].toLowerCase() !== 'desc')) {
          return false;
        }
      }
      return true;
    };
    checkFilterQueryProperty = function(filter) {
      var subVal, val, _k, _l, _len2, _len3, _len4, _m;
      if (!_.isArray(filter)) {
        console.log('f1');
        return false;
      }
      for (_k = 0, _len2 = filter.length; _k < _len2; _k++) {
        val = filter[_k];
        if (!_.isArray(val) || !(val.length === 3 || val.length === 4)) {
          console.log('f2');
          return false;
        }
        for (_l = 0, _len3 = val.length; _l < _len3; _l++) {
          subVal = val[_l];
          if (!_.isString(subVal)) {
            console.log('f3');
            return false;
          }
        }
      }
      for (_m = 0, _len4 = filter.length; _m < _len4; _m++) {
        val = filter[_m];
        if (!checkPropertiesAgainstResource(val[0])) {
          console.log('f4');
          return false;
        }
        if ((val[1] !== '=') && (val[1] !== '!=') && (val[1].toLowerCase() !== 'like') && (val[1] !== '>') && (val[1] !== '<')) {
          console.log('f5');
          return false;
        }
        if (val[2].length > 200) {
          console.log('f6');
          return false;
        }
        if (val[3]) {
          if ((val[3] !== 'and') && (val[3] !== 'or')) {
            console.log('f7');
            return false;
          }
        }
      }
      return true;
    };
    checkPropertiesAgainstResource = function(property) {
      if (_.isUndefined(resource.rawAttributes[property])) {
        return false;
      }
      if (property === 'uid') {
        return false;
      }
      if (property === 'id') {
        return false;
      }
      if (property === 'clientUid') {
        return false;
      }
      return true;
    };
    findCopy = _.extend({}, resourceQueryParams.find);
    delete findCopy.include;
    delete findCopy.offset;
    delete findCopy.limit;
    findCopy.attributes = ['id'];
    whereString = '';
    _ref2 = findCopy.where;
    for (prop in _ref2) {
      val = _ref2[prop];
      prop = sanitize(prop).trim();
      if (!_.isString(val) && _.isArray(val) && val.length > 0) {
        newValString = '';
        for (_k = 0, _len2 = val.length; _k < _len2; _k++) {
          item = val[_k];
          item = sanitize(item).trim();
          newValString += '"' + item + '", ';
        }
        newValString = newValString.substring(0, newValString.length - 2);
        whereString += '`' + resource.tableName + '`.`' + prop + '` IN (' + newValString + ') and ';
      } else {
        val = sanitize(val).trim();
        val = '"' + val + '"';
        whereString += '`' + resource.tableName + '`.`' + prop + '` = ' + val + ' and ';
      }
    }
    if (!_.isUndefined(req.query.filter)) {
      if (!_.isArray(req.query.filter) && _.isString(req.query.filter)) {
        try {
          filters = JSON.parse(req.query.filter);
        } catch (_error) {
          e = _error;
          res.jsonAPIRespond(config.apiErrorResponse('invalidFilterQuery'));
          return;
        }
      } else {
        filters = req.query.filter;
      }
      if (!checkFilterQueryProperty(filters)) {
        res.jsonAPIRespond(config.apiErrorResponse('invalidFilterQuery'));
        return;
      }
      for (_l = 0, _len3 = filters.length; _l < _len3; _l++) {
        filterArr = filters[_l];
        filterArr[0] = sanitize(filterArr[0]).trim();
        filterArr[1] = sanitize(filterArr[1]).trim();
        filterArr[2] = sanitize(filterArr[2]).trim();
        connector = '';
        if (!filterArr[3]) {
          connector = 'or';
        } else {
          connector = filterArr[3].toUpperCase();
        }
        if (filterArr[1].toLowerCase() === 'like') {
          whereString += '`' + resource.tableName + '`.`' + filterArr[0] + '` COLLATE UTF8_GENERAL_CI ' + filterArr[1].toUpperCase() + ' \'%' + filterArr[2] + '%\'  ' + connector + ' ';
        } else if ((filterArr[1].toLowerCase() === '>') || (filterArr[1].toLowerCase() === '<')) {
          whereString += '`' + resource.tableName + '`.`' + filterArr[0] + '` ' + filterArr[1] + ' \'' + filterArr[2] + '\'  ' + connector + ' ';
        } else {
          if ((filterArr[2] === 'null') && (filterArr[1].toLowerCase() !== 'like')) {
            whereString += '`' + resource.tableName + '`.`' + filterArr[0] + '` ' + (filterArr[1] === '=' ? 'IS' : 'IS NOT') + ' NULL   ' + connector + ' ';
          } else {
            whereString += '`' + resource.tableName + '`.`' + filterArr[0] + '` COLLATE UTF8_GENERAL_CI ' + filterArr[1] + ' \'' + filterArr[2] + '\'   ' + connector + ' ';
          }
        }
      }
    }
    whereString = whereString.substring(0, whereString.length - 5);
    if (!_.isUndefined(req.query.order)) {
      if (!_.isArray(req.query.order) && _.isString(req.query.order)) {
        try {
          orders = JSON.parse(req.query.order);
        } catch (_error) {
          e = _error;
          res.jsonAPIRespond(config.apiErrorResponse('invalidOrderQuery'));
          return;
        }
      } else {
        orders = req.query.order;
      }
      if (!checkOrderQueryProperty(orders)) {
        res.jsonAPIRespond(config.apiErrorResponse('invalidOrderQuery'));
        return;
      }
      orderArray = [];
      if (orders.length > 0) {
        whereString += ' ORDER BY ';
        for (_m = 0, _len4 = orders.length; _m < _len4; _m++) {
          order = orders[_m];
          orderArray.push('`' + resource.tableName + '`.`' + order[0] + '` ' + order[1].toUpperCase());
          whereString += '`' + resource.tableName + '`.`' + order[0] + '` ' + order[1].toUpperCase();
        }
      }
    }
    return sequelize.query("SELECT `" + resource.tableName + "`.`id` FROM `" + resource.tableName + "` WHERE " + whereString, null, {
      raw: true
    }).done(function(err, filterIds) {
      var filterIdsArr, findRealCopy, obj, offsetLimitSet, totalSetLen, _len5, _n;
      if (_.isNull(filterIds)) {
        res.jsonAPIRespond(config.apiErrorResponse('generalInvalid'));
        return;
      }
      totalSetLen = filterIds.length;
      offsetLimitSet = filterIds.splice(resourceQueryParams.find.offset, resourceQueryParams.find.limit);
      filterIdsArr = [];
      for (_n = 0, _len5 = offsetLimitSet.length; _n < _len5; _n++) {
        obj = offsetLimitSet[_n];
        filterIdsArr.push(obj.id);
      }
      resourceQueryParams.find.where.id = filterIdsArr;
      findRealCopy = _.extend({}, resourceQueryParams.find);
      delete findRealCopy.limit;
      delete findRealCopy.offset;
      if (!_.isUndefined(orderArray) && orderArray.length > 0) {
        findRealCopy.order = orderArray;
      }
      return resource[resourceQueryParams.method](findRealCopy).success(function(topResult) {
        var asyncMethods, expandResourceObjectArrayValue, model, resourceObject, subResource, subResourceExpandModels, subResourceIds, subResourceToExpandModel, subResult, subResultPropertyToExpandKey, _fn, _len6, _len7, _len8, _o, _p, _q, _ref3;
        if (!_.isArray(topResult)) {
          topResult = [topResult];
        }
        if (!verifyNoUnknownResource(topResult, resourceQueryParams.find)) {
          return;
        }
        if (Object.getOwnPropertyNames(secondLevelIncludeObjects).length === 0) {
          return sendFinalResult(topResult, totalSetLen);
        } else {
          topResult = JSON.parse(JSON.stringify(topResult));
          asyncMethods = [];
          for (_o = 0, _len6 = topResult.length; _o < _len6; _o++) {
            subResult = topResult[_o];
            _fn = function(asyncMethods, subResourceToExpandModel, subResourceIds, subResourceExpandModels, subResult, subResultPropertyToExpandKey) {
              return asyncMethods.push(function(callback) {
                return subResourceToExpandModel.findAll({
                  where: {
                    id: subResourceIds
                  },
                  include: subResourceExpandModels
                }).success(function(resultNewSubResource) {
                  var lastCharOfProp;
                  lastCharOfProp = subResultPropertyToExpandKey.substring(subResultPropertyToExpandKey.length, subResultPropertyToExpandKey.length - 1);
                  if (lastCharOfProp !== 's' && _.isArray(resultNewSubResource) && resultNewSubResource.length === 1) {
                    resultNewSubResource = resultNewSubResource[0];
                  }
                  subResult[subResultPropertyToExpandKey] = resultNewSubResource;
                  return callback();
                });
              });
            };
            for (subResultPropertyToExpandKey in secondLevelIncludeObjects) {
              expandResourceObjectArrayValue = secondLevelIncludeObjects[subResultPropertyToExpandKey];
              subResourceToExpandModel = ORM.model(subResultPropertyToExpandKey.replace(/s+$/, ''));
              subResourceIds = [];
              if (_.isObject(subResult[subResultPropertyToExpandKey]) && !_.isArray(subResult[subResultPropertyToExpandKey])) {
                subResourceIds.push(subResult[subResultPropertyToExpandKey].id);
              } else if (_.isArray(subResult[subResultPropertyToExpandKey])) {
                _ref3 = subResult[subResultPropertyToExpandKey];
                for (_p = 0, _len7 = _ref3.length; _p < _len7; _p++) {
                  subResource = _ref3[_p];
                  subResourceIds.push(subResource.id);
                }
              }
              subResourceExpandModels = [];
              for (_q = 0, _len8 = expandResourceObjectArrayValue.length; _q < _len8; _q++) {
                resourceObject = expandResourceObjectArrayValue[_q];
                model = ORM.model(resourceObject.resource.replace(/s+$/, ''));
                if (model) {
                  subResourceExpandModels.push(model);
                }
              }
              _fn(asyncMethods, subResourceToExpandModel, subResourceIds, subResourceExpandModels, subResult, subResultPropertyToExpandKey);
            }
          }
          return async.parallel(asyncMethods, function() {
            return sendFinalResult(topResult, totalSetLen);
          });
        }
      });
    });
  };

}).call(this);
