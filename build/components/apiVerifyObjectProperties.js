// Generated by CoffeeScript 1.6.3
(function() {
  var async, config, oRMValidateFieldsHelper, preventUnknownFieldsHelper, uuid, _;

  _ = require('underscore');

  uuid = require('node-uuid');

  async = require('async');

  config = require(GLOBAL.appRoot + 'config/config');

  oRMValidateFieldsHelper = require(GLOBAL.appRoot + 'components/oRMValidateFieldsHelper');

  preventUnknownFieldsHelper = require(GLOBAL.appRoot + 'components/preventUnknownFieldsHelper');

  module.exports = function(scope, resourceModel, testObjects, req, res, insertMethodCallback, requirements, finalMethod) {
    var objectValidationErrors, resp, unknownProperties;
    if (insertMethodCallback == null) {
      insertMethodCallback = false;
    }
    /*
    First iterate over all the properties of all the objects and verify that all required fields are present
    Also build an array of callbacks to test each required field
    */

    if (_.isArray(testObjects) || !_.isObject(testObjects)) {
      resp = config.errorResponse(400);
      if (insertMethodCallback) {
        insertMethodCallback(resp);
      } else {
        res.jsonAPIRespond(resp);
      }
      return;
    }
    testObjects = [testObjects];
    unknownProperties = preventUnknownFieldsHelper(resourceModel, testObjects, requirements);
    if (unknownProperties.length > 0) {
      resp = _.extend(config.errorResponse(400), {
        messages: unknownProperties
      });
      if (insertMethodCallback) {
        insertMethodCallback(resp);
      } else {
        res.jsonAPIRespond(resp);
      }
      return;
    }
    objectValidationErrors = oRMValidateFieldsHelper(testObjects, resourceModel);
    if (objectValidationErrors.length > 0) {
      resp = _.extend(config.errorResponse(400), {
        messages: objectValidationErrors
      });
      if (insertMethodCallback) {
        insertMethodCallback(resp);
      } else {
        res.jsonAPIRespond(resp);
      }
      return;
    }
    return async.series([
      function(superCallback) {
        var errorMessages, key, object, propertyAsyncMethods, propertyName, propertyValueCheckCallback, uidMappings, valueToTest, _fn, _i, _len, _ref;
        propertyAsyncMethods = [];
        for (key = _i = 0, _len = testObjects.length; _i < _len; key = ++_i) {
          object = testObjects[key];
          _ref = requirements.requiredProperties;
          _fn = function(valueToTest, propertyValueCheckCallback, scope, objectKey, object) {
            return propertyAsyncMethods.push(function(callback) {
              return propertyValueCheckCallback.call(scope, valueToTest, objectKey, object, callback);
            });
          };
          for (propertyName in _ref) {
            propertyValueCheckCallback = _ref[propertyName];
            valueToTest = object[propertyName];
            _fn(valueToTest, propertyValueCheckCallback, scope, key, object);
          }
        }
        uidMappings = {};
        errorMessages = [];
        return async.parallel(propertyAsyncMethods, function(err, results) {
          var mappingORMResource, mappingUid, objectPropKey, objectPropValue, propertyAssocORM, propertyPrefix, suffix, val, _j, _k, _len1, _len2, _ref1, _results;
          for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
            val = results[_j];
            if (val.success === false) {
              if (val.message) {
                errorMessages.push(val.message);
              }
            } else {
              if (_.isObject(val.uidMapping)) {
                _ref1 = val.uidMapping;
                for (mappingUid in _ref1) {
                  mappingORMResource = _ref1[mappingUid];
                  uidMappings[mappingUid] = mappingORMResource;
                }
              }
            }
            if (_.isArray(val.transform)) {
              testObjects[val.transform[0]][val.transform[1]] = val.transform[2];
            }
          }
          if ((objectValidationErrors.length > 0) || (errorMessages.length > 0)) {
            resp = _.extend(config.errorResponse(400), {
              messages: errorMessages.concat(objectValidationErrors)
            });
            if (insertMethodCallback) {
              insertMethodCallback(resp);
            } else {
              res.jsonAPIRespond(resp);
            }
            superCallback(new Error('object property test failed'));
            return;
          }
          _results = [];
          for (key = _k = 0, _len2 = testObjects.length; _k < _len2; key = ++_k) {
            object = testObjects[key];
            for (objectPropKey in object) {
              objectPropValue = object[objectPropKey];
              if (_.isNull(objectPropValue) || _.isUndefined(objectPropValue)) {
                continue;
              }
              suffix = 'Uid';
              if (objectPropKey.indexOf(suffix, objectPropKey.length - suffix.length) > -1) {
                propertyAssocORM = uidMappings[objectPropValue];
                propertyPrefix = objectPropKey.substring(0, objectPropKey.indexOf('Uid'));
                testObjects[key][propertyPrefix + 'Id'] = propertyAssocORM.id;
              }
            }
            _results.push(superCallback(null, uidMappings));
          }
          return _results;
        });
      }, function(superCallback) {
        return finalMethod(testObjects);
      }
    ]);
  };

}).call(this);
