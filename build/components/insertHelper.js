// Generated by CoffeeScript 1.6.3
(function() {
  var async, config, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  module.exports = function(apiCollectionName, clientUid, resource, objects, req, res, app, insertMethodCallback) {
    var error, item, key, object, _i, _len;
    if (insertMethodCallback == null) {
      insertMethodCallback = false;
    }
    for (key = _i = 0, _len = objects.length; _i < _len; key = ++_i) {
      object = objects[key];
      objects[key]['uid'] = uuid.v4();
    }
    item = objects[0];
    try {
      return resource.create(item).success(function(createdItem) {
        var responseUid, roomName, silent;
        responseUid = createdItem.uid;
        if (!_.isUndefined(app.io) && _.isFunction(app.io.room)) {
          roomName = clientUid + '-postResources';
          if (!_.isUndefined(req.query.silent)) {
            if (req.query.silent === 'true') {
              silent = true;
            } else {
              silent = false;
            }
          } else {
            if (req.requestType === 'http') {
              silent = true;
            } else {
              silent = false;
            }
          }
          if (!silent && !_.isArray(req.body)) {
            app.io.room(roomName).broadcast('resourcePost', {
              apiCollectionName: apiCollectionName,
              resourceName: resource.name,
              resource: JSON.parse(JSON.stringify(createdItem))
            });
          }
          if (!_.isUndefined(req.io) && _.isFunction(req.io.join)) {
            if (!_.isUndefined(req.session) && !_.isUndefined(req.session.user) && !_.isUndefined(req.session.user.clientUid)) {
              req.io.join(responseUid);
            }
          }
        }
        if (insertMethodCallback === false) {
          return config.apiSuccessPostResponse(res, responseUid);
        } else {
          return insertMethodCallback(responseUid);
        }
      });
    } catch (_error) {
      error = _error;
      console.log('error insertHelper');
      return console.log(error);
    }
  };

}).call(this);
