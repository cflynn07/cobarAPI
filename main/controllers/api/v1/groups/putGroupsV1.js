// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, apiAuth, apiVerifyObjectProperties, async, config, sequelize, updateHelper, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  updateHelper = require(GLOBAL.appRoot + 'components/updateHelper');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var employee, group;
    group = ORM.model('group');
    employee = ORM.model('employee');
    return app.put(config.apiSubDir + '/v1/groups', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          switch (userType) {
            case 'superAdmin':
              return apiVerifyObjectProperties(this, group, req.body, req, res, false, {
                requiredProperties: {
                  'uid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      return callback(null, {
                        success: false,
                        message: {
                          uid: 'required'
                        }
                      });
                    } else {
                      return group.find({
                        where: {
                          uid: val
                        }
                      }).success(function(resultGroup) {
                        var mapObj;
                        if (resultGroup) {
                          mapObj = {};
                          mapObj[val] = resultGroup;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              uid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  },
                  'name': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'ordinal': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'description': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  }
                }
              }, function(objects) {
                return updateHelper(group, objects, req, res, app);
              });
            case 'clientSuperAdmin':
            case 'clientAdmin':
              return apiVerifyObjectProperties(this, group, req.body, req, res, false, {
                requiredProperties: {
                  'uid': function(val, objectKey, object, callback) {
                    if (_.isUndefined(val)) {
                      return callback(null, {
                        success: false,
                        message: {
                          uid: 'required'
                        }
                      });
                    } else {
                      return group.find({
                        where: {
                          uid: val,
                          clientUid: clientUid
                        }
                      }).success(function(resultGroup) {
                        var mapObj;
                        if (resultGroup) {
                          mapObj = {};
                          mapObj[val] = resultGroup;
                          return callback(null, {
                            success: true,
                            uidMapping: mapObj
                          });
                        } else {
                          return callback(null, {
                            success: false,
                            message: {
                              uid: 'unknown'
                            }
                          });
                        }
                      });
                    }
                  },
                  'name': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'ordinal': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  },
                  'description': function(val, objectKey, object, callback) {
                    return callback(null, {
                      success: true
                    });
                  }
                }
              }, function(objects) {
                return updateHelper(group, objects, req, res, app);
              });
            case 'clientDelegate':
            case 'clientAuditor':
              return res.jsonAPIRespond(config.errorResponse(401));
          }
        }
      ]);
    });
  };

}).call(this);
