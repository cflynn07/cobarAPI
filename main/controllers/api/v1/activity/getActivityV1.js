// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, apiAuth, apiExpand, async, config, sequelize, _;

  _ = require('underscore');

  async = require('async');

  config = require(GLOBAL.appRoot + 'config/config');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  apiExpand = require(GLOBAL.appRoot + 'components/apiExpand');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var activity, expandWithReadResult, tempRespondHolder;
    tempRespondHolder = function() {};
    expandWithReadResult = function(req, response) {
      var activityItem, data, item, key, uids, _i, _j, _len, _len1, _ref;
      if (response.code === 200 && response.response.data.length > 0) {
        uids = [];
        data = response.response.data;
        if (!_.isArray(data)) {
          data = [data];
        }
        for (_i = 0, _len = data.length; _i < _len; _i++) {
          item = data[_i];
          uids.push('\'' + item.uid + '\'');
          if (!_.isUndefined(req.io) && _.isFunction(req.io.join)) {
            if (!_.isUndefined(req.session) && !_.isUndefined(req.session.user) && !_.isUndefined(req.session.user.clientUid)) {
              req.io.join(req.session.user.uid + '-' + item.uid);
            }
          }
        }
        if (_.isArray(response.response.data)) {
          _ref = response.response.data;
          for (key = _j = 0, _len1 = _ref.length; _j < _len1; key = ++_j) {
            activityItem = _ref[key];
            response.response.data[key].readState = false;
          }
        } else {
          response.response.data.readState = false;
        }
        return sequelize.query("SELECT * FROM activitiesReadState WHERE employeeUid = \'" + req.session.user.uid + "\' AND activityUid in (" + uids.join(',') + ")", null, {
          raw: true
        }).done(function(err, queryReslts) {
          var readStateItem, _k, _l, _len2, _len3, _len4, _m, _ref1;
          if (_.isArray(response.response.data)) {
            for (_k = 0, _len2 = queryReslts.length; _k < _len2; _k++) {
              readStateItem = queryReslts[_k];
              _ref1 = response.response.data;
              for (key = _l = 0, _len3 = _ref1.length; _l < _len3; key = ++_l) {
                activityItem = _ref1[key];
                if (activityItem.uid === readStateItem.activityUid) {
                  response.response.data[key].readState = true;
                  break;
                }
              }
            }
          } else {
            for (_m = 0, _len4 = queryReslts.length; _m < _len4; _m++) {
              readStateItem = queryReslts[_m];
              if (response.response.data.uid === readStateItem.activityUid) {
                response.response.data.readState = true;
                break;
              }
            }
          }
          return tempRespondHolder(response);
        });
      } else {
        return tempRespondHolder(response);
      }
    };
    activity = ORM.model('activity');
    app.get(config.apiSubDir + '/v1/activity', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, params, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          switch (userType) {
            case 'superAdmin':
              params = {
                method: 'findAll',
                find: {}
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(response) {
                return expandWithReadResult(req, response);
              };
              return apiExpand(req, res, activity, params);
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    clientUid: clientUid
                  }
                }
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(response) {
                return expandWithReadResult(req, response);
              };
              return apiExpand(req, res, activity, params);
          }
        }
      ]);
    });
    return app.get(config.apiSubDir + '/v1/activity/:id', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, params, uids, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          uids = req.params.id.split(',');
          switch (userType) {
            case 'superAdmin':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    uid: uids
                  }
                }
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(response) {
                return expandWithReadResult(req, response);
              };
              return apiExpand(req, res, activity, params);
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    uid: uids,
                    clientUid: clientUid
                  }
                }
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(response) {
                return expandWithReadResult(req, response);
              };
              return apiExpand(req, res, activity, params);
          }
        }
      ]);
    });
  };

}).call(this);
