// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, activityInsert, apiAuth, apiVerifyObjectProperties, async, config, insertHelper, redisClient, sequelize, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  apiVerifyObjectProperties = require(GLOBAL.appRoot + 'components/apiVerifyObjectProperties');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  insertHelper = require(GLOBAL.appRoot + 'components/insertHelper');

  activityInsert = require(GLOBAL.appRoot + 'components/activityInsert');

  sequelize = ORM.setup();

  redisClient = require(GLOBAL.appRoot + 'components/redis').createClient();

  module.exports = function(app) {
    var client, employee, event, eventParticipant, field, group, revision, submission, submissionField;
    employee = ORM.model('employee');
    client = ORM.model('client');
    event = ORM.model('event');
    revision = ORM.model('revision');
    eventParticipant = ORM.model('eventParticipant');
    submission = ORM.model('submission');
    submissionField = ORM.model('submissionField');
    field = ORM.model('field');
    group = ORM.model('group');
    return app.put(config.apiSubDir + '/v1/submissionfields', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, employeeUid, helperCheckEventParticipantUid, helperCheckFieldUid, helperInsertSubmissionField, insertMethod, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          employeeUid = req.session.user.uid;
          helperInsertSubmissionField = function(objects, finalCallback) {
            var insertObj, object;
            object = objects[0];
            insertObj = {
              uid: uuid.v4(),
              fieldUid: object.fieldUid,
              eventParticipantUid: object.eventParticipantUid
            };
            if (!_.isUndefined(object.openResponseValue)) {
              insertObj.openResponseValue = object.openResponseValue;
            }
            if (!_.isUndefined(object.sliderValue)) {
              insertObj.sliderValue = object.sliderValue;
            }
            if (!_.isUndefined(object.yesNoValue)) {
              insertObj.yesNoValue = object.yesNoValue;
            }
            insertObj.fieldId = object.uidMapping[object.fieldUid].id;
            insertObj.eventParticipantId = object.uidMapping[object.eventParticipantUid].id;
            insertObj.clientUid = object.uidMapping[object.eventParticipantUid].clientUid;
            insertObj.clientId = object.uidMapping[object.eventParticipantUid].clientId;
            return submissionField.find({
              where: {
                eventParticipantUid: object.eventParticipantUid,
                fieldUid: object.fieldUid,
                clientUid: clientUid
              }
            }).success(function(resultSubmissionField) {
              if (!resultSubmissionField) {
                submissionField.create(insertObj).success(function(resultSubmissionField) {
                  return finalCallback();
                });
              } else {
                resultSubmissionField.updateAttributes(insertObj).success(function(resultSubmissionField) {
                  return finalCallback();
                });
              }
              insertObj = null;
              return object = null;
            });
          };
          helperCheckFieldUid = function(val, objectKey, object, callback) {
            var eventParticipantUid, fieldUid;
            eventParticipantUid = object['eventParticipantUid'];
            fieldUid = val;
            if (_.isUndefined(fieldUid)) {
              callback(null, {
                success: false,
                message: {
                  fieldUid: 'required'
                }
              });
              return;
            }
            if (_.isUndefined(eventParticipantUid)) {
              callback(null, {
                success: false
              });
              return;
            }
            return async.parallel([
              function(subCallback) {
                return eventParticipant.find({
                  where: {
                    uid: eventParticipantUid,
                    clientUid: clientUid,
                    employeeUid: employeeUid
                  }
                }).success(function(resultEventParticipant) {
                  if (!resultEventParticipant) {
                    subCallback(null, [resultEventParticipant]);
                    return;
                  }
                  return event.find({
                    where: {
                      uid: resultEventParticipant.eventUid,
                      clientUid: clientUid
                    }
                  }).success(function(resultEvent) {
                    return subCallback(null, [resultEventParticipant, resultEvent]);
                  });
                });
              }, function(subCallback) {
                return field.find({
                  where: {
                    uid: fieldUid,
                    clientUid: clientUid
                  }
                }).success(function(resultField) {
                  if (!resultField) {
                    subCallback(null, [resultField]);
                    return;
                  }
                  return group.find({
                    where: {
                      uid: resultField.groupUid,
                      clientUid: clientUid
                    }
                  }).success(function(resultGroup) {
                    if (!resultGroup) {
                      subCallback(null, [resultGroup]);
                      return;
                    }
                    return revision.find({
                      where: {
                        uid: resultGroup.revisionUid,
                        clientUid: clientUid
                      }
                    }).success(function(resultRevision) {
                      if (!resultRevision) {
                        subCallback(null, [resultRevision]);
                        return;
                      }
                      return subCallback(null, [resultField, resultGroup, resultRevision]);
                    });
                  });
                });
              }
            ], function(err, results) {
              var mapObj, messages, resultEvent, resultEventParticipant, resultField, resultGroup, resultRevision;
              resultEventParticipant = results[0][0];
              resultField = results[1][0];
              if (resultEventParticipant) {
                resultEvent = results[0][1];
              }
              if (resultField) {
                resultGroup = results[1][1];
                resultRevision = results[1][2];
              }
              messages = {};
              if (!resultField) {
                messages.resultField = 'unknown';
              }
              if (!resultEventParticipant) {
                messages.resultEventParticipant = 'unknown';
              }
              if (!resultEvent || !resultRevision || (resultRevision.uid !== resultEvent.revisionUid)) {
                messages.resultEventParticipant = 'unknown';
                messages.resultField = 'unknown';
              }
              if (Object.keys(messages).length > 0) {
                return callback(null, {
                  success: false,
                  message: messages
                });
              } else {
                mapObj = {};
                mapObj[resultEventParticipant.uid] = resultEventParticipant;
                mapObj[resultField.uid] = resultField;
                mapObj[resultGroup.uid] = resultGroup;
                mapObj[resultRevision.uid] = resultRevision;
                mapObj[resultEvent.uid] = resultEvent;
                return callback(null, {
                  success: true,
                  transform: [objectKey, 'uidMapping', mapObj],
                  uidMapping: mapObj
                });
              }
            });
          };
          helperCheckEventParticipantUid = function(val, objectKey, object, callback) {
            if (_.isUndefined(val)) {
              callback(null, {
                success: false,
                message: {
                  eventParticipantUid: 'required'
                }
              });
              return;
            }
            callback(null, {
              success: true
            });
          };
          switch (userType) {
            case 'superAdmin':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, submissionField, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'openResponseValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            openResponseValue: 'required'
                          }
                        });
                      }
                    },
                    'sliderValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            sliderValue: 'required'
                          }
                        });
                      }
                    },
                    'yesNoValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            yesNoValue: 'required'
                          }
                        });
                      }
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            clientUid: 'invalid'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'fieldUid': function(val, objectKey, object, callback) {
                      return helperCheckFieldUid(val, objectKey, object, callback);
                    },
                    'eventParticipantUid': function(val, objectKey, object, callback) {
                      return helperCheckEventParticipantUid(val, objectKey, object, callback);
                    }
                  }
                }, function(objects) {
                  return helperInsertSubmissionField(objects, function() {
                    return res.jsonAPIRespond({
                      foo: 'bar'
                    });
                  });
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body);
              }
              break;
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              insertMethod = function(item, insertMethodCallback) {
                if (insertMethodCallback == null) {
                  insertMethodCallback = false;
                }
                return apiVerifyObjectProperties(this, submissionField, item, req, res, insertMethodCallback, {
                  requiredProperties: {
                    'openResponseValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            openResponseValue: 'required'
                          }
                        });
                      }
                    },
                    'sliderValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            sliderValue: 'required'
                          }
                        });
                      }
                    },
                    'yesNoValue': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        return callback(null, {
                          success: true
                        });
                      } else {
                        return callback(null, {
                          success: false,
                          message: {
                            yesNoValue: 'required'
                          }
                        });
                      }
                    },
                    'clientUid': function(val, objectKey, object, callback) {
                      if (!_.isUndefined(val)) {
                        callback(null, {
                          success: false,
                          message: {
                            clientUid: 'invalid'
                          }
                        });
                        return;
                      }
                      return callback(null, {
                        success: true
                      });
                    },
                    'fieldUid': function(val, objectKey, object, callback) {
                      return helperCheckFieldUid(val, objectKey, object, callback);
                    },
                    'eventParticipantUid': function(val, objectKey, object, callback) {
                      return helperCheckEventParticipantUid(val, objectKey, object, callback);
                    }
                  }
                }, function(objects) {
                  return helperInsertSubmissionField(objects, function() {
                    return res.jsonAPIRespond({
                      foo: 'bar'
                    });
                  });
                });
              };
              if (_.isArray(req.body)) {
                return async.mapSeries(req.body, function(item, callback) {
                  return insertMethod(item, function(createdUid) {
                    return callback(null, createdUid);
                  });
                }, function(err, results) {
                  return config.apiSuccessPostResponse(res, results);
                });
              } else {
                return insertMethod(req.body);
              }
          }
        }
      ]);
    });
  };

}).call(this);
