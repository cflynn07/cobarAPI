// Generated by CoffeeScript 1.6.3
(function() {
  var ORM, apiAuth, apiExpand, async, config, sequelize, _;

  _ = require('underscore');

  async = require('async');

  config = require(GLOBAL.appRoot + 'config/config');

  apiAuth = require(GLOBAL.appRoot + 'components/apiAuth');

  apiExpand = require(GLOBAL.appRoot + 'components/apiExpand');

  ORM = require(GLOBAL.appRoot + 'components/oRM');

  sequelize = ORM.setup();

  module.exports = function(app) {
    var eventParticipant, updateAsViewedHelper;
    eventParticipant = ORM.model('eventParticipant');
    app.get(config.apiSubDir + '/v1/eventparticipants', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, params, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          switch (userType) {
            case 'superAdmin':
              params = {
                method: 'findAll',
                find: {}
              };
              return apiExpand(req, res, eventParticipant, params);
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    clientUid: clientUid
                  }
                }
              };
              return apiExpand(req, res, eventParticipant, params);
          }
        }
      ]);
    });
    updateAsViewedHelper = function(employeeUid, result, req, res) {
      if (result.employeeUid === employeeUid) {
        return eventParticipant.find({
          where: {
            uid: result.uid
          }
        }).success(function(resultEventParticipant) {
          if (_.isNull(resultEventParticipant.initialViewDateTime)) {
            return resultEventParticipant.updateAttributes({
              initialViewDateTime: new Date()
            }).success(function() {
              return config.apiBroadcastPut(eventParticipant, resultEventParticipant, app, req, res);
            });
          }
        });
      }
    };
    return app.get(config.apiSubDir + '/v1/eventparticipants/:id', function(req, res) {
      return async.series([
        function(callback) {
          return apiAuth(req, res, callback);
        }, function(callback) {
          var clientUid, employeeUid, params, tempRespondHolder, uids, userType;
          userType = req.session.user.type;
          clientUid = req.session.user.clientUid;
          employeeUid = req.session.user.uid;
          uids = req.params.id.split(',');
          switch (userType) {
            case 'superAdmin':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    uid: uids
                  }
                }
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(result) {
                if (result.code === 200) {
                  updateAsViewedHelper(employeeUid, result.result, req, res);
                }
                return tempRespondHolder(result);
              };
              return apiExpand(req, res, eventParticipant, params);
            case 'clientSuperAdmin':
            case 'clientAdmin':
            case 'clientDelegate':
            case 'clientAuditor':
              params = {
                method: 'findAll',
                find: {
                  where: {
                    uid: uids,
                    clientUid: clientUid
                  }
                }
              };
              tempRespondHolder = res.jsonAPIRespond;
              res.jsonAPIRespond = function(result) {
                if (result.code === 200) {
                  updateAsViewedHelper(employeeUid, result.response.data, req, res);
                }
                return tempRespondHolder(result);
              };
              return apiExpand(req, res, eventParticipant, params);
          }
        }
      ]);
    });
  };

}).call(this);
