// Generated by CoffeeScript 1.6.3
(function() {
  var config, _;

  _ = require('underscore');

  config = {
    resourceModelUnknownFieldsExceptions: {},
    isValidUUID: function(uuid) {
      var rgx;
      rgx = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;
      return rgx.test(uuid);
    },
    apiSubDir: '/api',
    env: ((GLOBAL.app != null) && (GLOBAL.app.settings != null) && GLOBAL.app.settings.env ? GLOBAL.app.settings.env : 'development'),
    authCategories: ['superAdmin', 'clientSuperAdmin', 'clientAdmin', 'clientDelegate', 'clientAuditor'],
    apiResponseErrors: {
      'nestedTooDeep': {
        code: 400,
        message: 'extend can not nest resources deeper than two levels'
      },
      'invalidExpandJSON': {
        code: 400,
        message: 'invalid expand JSON parameter'
      },
      'unknownExpandResource': {
        code: 400,
        message: 'unknown expand resource'
      },
      'circularExpand': {
        code: 400,
        message: ''
      },
      'unknownRootResourceId': {
        code: 404,
        message: 'unknown resource uid specified'
      },
      'invalidFilterQuery': {
        code: 400,
        message: 'invalid filter query parameter'
      },
      'invalidOrderQuery': {
        code: 400,
        message: 'invalid order query parameter'
      },
      'generalInvalid': {
        code: 400,
        message: 'invalid request'
      }
    },
    defaultCode: 200,
    apiResponseCodes: {
      200: 'OK',
      201: 'Created',
      202: 'Accepted',
      301: 'Moved Permanently',
      400: 'Bad Request',
      401: 'Unauthorized',
      402: 'Forbidden',
      404: 'Not Found'
    },
    response: function(code) {
      if (code == null) {
        code = 200;
      }
      if ([200, 201, 202].indexOf(code) === -1) {
        throw new Error('Invalid API response');
        return;
      }
      return {
        code: code,
        message: this.apiResponseCodes[code]
      };
    },
    errorResponse: function(code) {
      if (code == null) {
        code = 401;
      }
      if ([301, 400, 401, 402, 404].indexOf(code) === -1) {
        throw new Error('Invalid API error response');
        return;
      }
      return {
        code: code,
        error: this.apiResponseCodes[code]
      };
    },
    apiErrorResponse: function(apiResponseErrorName) {
      var apiResponseErrorsObject;
      apiResponseErrorsObject = this.apiResponseErrors[apiResponseErrorName];
      if (_.isUndefined(apiResponseErrorsObject)) {
        throw new Error('Invalid API error response');
        return;
      }
      return _.extend(this.errorResponse(apiResponseErrorsObject.code), {
        message: apiResponseErrorsObject.message
      });
    },
    apiSuccessPostResponse: function(res, responseUid) {
      var errorsIndexes, finalResponseObj, key, responseUids, uid, _i, _len;
      responseUids = {};
      errorsIndexes = [];
      if (!_.isArray(responseUid)) {
        responseUids = {
          '0': responseUid
        };
      } else if (_.isArray(responseUid)) {
        for (key = _i = 0, _len = responseUid.length; _i < _len; key = ++_i) {
          uid = responseUid[key];
          if (_.isObject(uid)) {
            errorsIndexes.push(key);
          }
          responseUids[key] = uid;
        }
      }
      finalResponseObj = {
        code: 201,
        message: this.apiResponseCodes[201],
        uids: responseUids
      };
      if (errorsIndexes.length > 0) {
        finalResponseObj.code = 400;
        finalResponseObj.message = this.apiResponseCodes[400];
        finalResponseObj.errors = errorsIndexes;
      }
      return res.jsonAPIRespond(finalResponseObj);
    },
    apiBroadcastPut: function(resource, resultResource, app, req, res) {
      var silent;
      if (!_.isUndefined(req.query) && !_.isUndefined(req.query.silent)) {
        if (req.query.silent === 'true') {
          silent = true;
        } else {
          silent = false;
        }
      } else {
        if (req.requestType === 'http') {
          silent = true;
        } else {
          silent = false;
        }
      }
      if (!silent) {
        if (!_.isUndefined(app.io) && _.isFunction(app.io.room)) {
          return app.io.room(resultResource.uid).broadcast('resourcePut', {
            apiCollectionName: '',
            resourceName: resource.name,
            resource: resultResource.values
          });
        }
      }
    }
  };

  if (GLOBAL.env && GLOBAL.env.DOTCLOUD_DATA_REDIS_HOST) {
    config.redis = {
      prefix: 'voxtracker:',
      host: GLOBAL.env.DOTCLOUD_DATA_REDIS_HOST,
      port: GLOBAL.env.DOTCLOUD_DATA_REDIS_PORT,
      pass: GLOBAL.env.DOTCLOUD_DATA_REDIS_PASSWORD
    };
  } else {
    config.redis = {
      prefix: '',
      host: 'localhost',
      port: 6379,
      pass: ''
    };
  }

  if (process.env.CIRCLECI) {
    config.mysql = {
      host: 'localhost',
      user: '',
      pass: '',
      port: '',
      db: 'circle_test'
    };
  } else if (GLOBAL.env && GLOBAL.env.DOTCLOUD_DB_MYSQL_LOGIN) {
    config.mysql = {
      host: GLOBAL.env.DOTCLOUD_DB_MYSQL_HOST,
      user: GLOBAL.env.DOTCLOUD_DB_MYSQL_LOGIN,
      pass: GLOBAL.env.DOTCLOUD_DB_MYSQL_PASSWORD,
      port: GLOBAL.env.DOTCLOUD_DB_MYSQL_PORT,
      db: 'production'
    };
  } else if (process.env.NODE_ENV === 'production') {
    config.mysql = {
      host: 'localhost',
      user: 'root',
      pass: '831e74a2068330b1fddd2e6715929bad',
      port: 3306,
      db: 'production'
    };
  } else if (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') {
    config.mysql = {
      host: '127.0.0.1',
      user: 'root',
      pass: 'password',
      port: 3306,
      db: 'development'
    };
  }

  module.exports = config;

}).call(this);
