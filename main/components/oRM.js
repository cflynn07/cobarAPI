// Generated by CoffeeScript 1.6.3
(function() {
  var Sequelize, config, exportObj, fs, modelsPath, _;

  Sequelize = require('sequelize');

  fs = require('fs');

  _ = require('underscore');

  config = require(GLOBAL.appRoot + 'config/config');

  modelsPath = GLOBAL.appRoot + 'models';

  exportObj = {
    setup: function() {
      var exportModels, modelName, models, relObject, relations, relationships, sequelize, sequelizeDefaults, _i, _len, _ref;
      if (this.instance) {
        return this.instance;
      }
      sequelizeDefaults = {
        maxConcurrentQueries: 100,
        pool: {
          maxConnections: 5,
          maxIdleTime: 30
        },
        define: {
          underscored: false
        },
        syncOnAssociation: false,
        paranoid: true,
        logging: false
      };
      sequelizeDefaults = _.extend(sequelizeDefaults, config.mysql);
      sequelize = new Sequelize(config.mysql.db, config.mysql.user, config.mysql.pass, sequelizeDefaults);
      relationships = this.relationships;
      models = this.models;
      exportModels = {};
      fs.readdirSync(modelsPath).forEach(function(name) {
        var modelName, object, options;
        if (name.indexOf('.coffee') > 0) {
          return;
        }
        object = require(modelsPath + '/' + name);
        options = object.options || {};
        modelName = name.replace(/\.js$/i, '');
        object.model = _.extend({
          uid: {
            type: Sequelize.STRING,
            validate: {
              isUUID: 4,
              notNull: true,
              unique: true
            }
          }
        }, object.model);
        models[modelName] = sequelize.define(modelName, object.model, options);
        exportModels[modelName] = {
          model: object.model
        };
        if (object.relations) {
          relationships[modelName] = object.relations;
          return exportModels[modelName].relations = object.relations;
        }
      });
      /*
      # Use the following line to export your ORM objects to the client side to share validation rules (useful)
      */

      fs.writeFileSync(GLOBAL.appRoot + '../client/config/clientOrmShare.json', JSON.stringify(exportModels));
      _ref = this.relationships;
      for (modelName in _ref) {
        relations = _ref[modelName];
        for (_i = 0, _len = relations.length; _i < _len; _i++) {
          relObject = relations[_i];
          if (!_.isObject(relObject.options)) {
            relObject.options = {};
          }
          this.models[modelName][relObject.relation](this.models[relObject.model], relObject.options);
        }
      }
      this.instance = sequelize;
      return this.instance;
    },
    instance: null,
    SEQ: Sequelize,
    models: [],
    relationships: {},
    model: function(name) {
      return this.models[name];
    }
  };

  module.exports = exportObj;

}).call(this);
