// Generated by CoffeeScript 1.6.3
(function() {
  var ORMValidateFieldsHelper, async, config, preventUnknownFieldsHelper, uuid, _;

  _ = require('underscore');

  async = require('async');

  uuid = require('node-uuid');

  config = require(GLOBAL.appRoot + 'config/config');

  ORMValidateFieldsHelper = require(GLOBAL.appRoot + 'components/oRMValidateFieldsHelper');

  preventUnknownFieldsHelper = require(GLOBAL.appRoot + 'components/preventUnknownFieldsHelper');

  module.exports = function(scope, resourceModel, postObjects, req, res, requirements, finalMethod) {
    /*
    First iterate over all the properties of all the objects and verify that all required fields are present
    Also build an array of callbacks to test each required field
    */

    var objectValidationErrors, uidMappings, unknownProperties;
    if (!_.isArray(postObjects)) {
      postObjects = [postObjects];
    }
    unknownProperties = preventUnknownFieldsHelper(resourceModel, postObjects, requirements);
    if (unknownProperties.length > 0) {
      res.jsonAPIRespond(_.extend(config.errorResponse(400), {
        messages: unknownProperties
      }));
      return;
    }
    objectValidationErrors = ORMValidateFieldsHelper(postObjects, resourceModel);
    if (objectValidationErrors.length > 0) {
      res.jsonAPIRespond(_.extend(config.errorResponse(400), {
        messages: objectValidationErrors
      }));
      return;
    }
    uidMappings = {};
    return async.series([
      function(superCallback) {
        var key, object, objectPropKey, objectPropValue, propertyAssocId, propertyAsyncMethods, propertyName, propertyPrefix, propertyValueCheckCallback, suffix, valueToTest, _fn, _i, _j, _len, _len1, _ref, _results;
        propertyAsyncMethods = [];
        for (key = _i = 0, _len = postObjects.length; _i < _len; key = ++_i) {
          object = postObjects[key];
          _ref = requirements.requiredProperties;
          _fn = function(valueToTest, propertyValueCheckCallback, scope, objectKey, object) {
            return propertyAsyncMethods.push(function(callback) {
              return propertyValueCheckCallback.call(scope, valueToTest, objectKey, object, callback);
            });
          };
          for (propertyName in _ref) {
            propertyValueCheckCallback = _ref[propertyName];
            valueToTest = object[propertyName];
            _fn(valueToTest, propertyValueCheckCallback, scope, key, object);
          }
        }
        async.parallel(propertyAsyncMethods, function(err, results) {
          var errorMessages, mappingId, mappingUid, val, _j, _len1, _ref1;
          errorMessages = [];
          for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
            val = results[_j];
            if (val.success === false) {
              if (val.message) {
                errorMessages.push(val.message);
              }
            } else {
              if (_.isObject(val.mapping)) {
                _ref1 = val.mapping;
                for (mappingUid in _ref1) {
                  mappingId = _ref1[mappingUid];
                  uidMappings[mappingUid] = mappingId;
                }
              }
            }
            if (_.isArray(val.transform)) {
              postObjects[val.transform[0]][val.transform[1]] = val.transform[2];
            }
          }
          if (errorMessages.length > 0) {
            res.jsonAPIRespond(_.extend(config.errorResponse(400), {
              messages: errorMessages
            }));
            superCallback(new Error('object property test failed'));
          }
        });
        _results = [];
        for (key = _j = 0, _len1 = postObjects.length; _j < _len1; key = ++_j) {
          object = postObjects[key];
          for (objectPropKey in object) {
            objectPropValue = object[objectPropKey];
            suffix = 'Uid';
            if (objectPropKey.indexOf(suffix, objectPropKey.length - suffix.length) > -1) {
              propertyAssocId = uidMappings[objectPropValue];
              propertyPrefix = objectPropKey.substring(0, objectPropKey.indexOf('Uid'));
              postObjects[key][propertyPrefix + 'Id'] = propertyAssocId;
            }
          }
          _results.push(superCallback(null, uidMappings));
        }
        return _results;
      }, function(superCallback) {
        return finalMethod(postObjects);
        /*
        async.map postObjects, (item, callback) ->
        
          resourceModel.create(item).success () ->
            callback()
        
        , (err, results) ->
          res.jsonAPIRespond(code: 201, message: config.apiResponseCodes[201])
        */

      }
    ]);
  };

}).call(this);
